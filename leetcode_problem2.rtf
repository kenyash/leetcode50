
+---------------+---------+
| Column Name   | Type    |
+---------------+---------+
| product_id    | int     |
| new_price     | int     |
| change_date   | date    |
+---------------+---------+
(product_id, change_date) is the primary key (combination of columns with unique values) of this table.
Each row of this table indicates that the price of some product was changed to a new price at some date.

 Initially, all products have price 10.
 Write a solution to find the prices of all products on the date
 Return the result table in
 any order
The result format is in the following example.


Example 1:
Input:
Products table:
+------------+-----------+-------------+
| product_id | new_price | change_date |
+------------+-----------+-------------+
| 1          | 20        | 2019-08-14  |
| 2          | 50        | 2019-08-14  |
| 1          | 30        | 2019-08-15  |
| 1          | 35        | 2019-08-16  |
| 2          | 65        | 2019-08-17  |
| 3          | 20        | 2019-08-18  |
+------------+-----------+-------------+

Output:

+------------+-------+
| product_id | price |
+------------+-------+
| 2          | 50    |
| 1          | 35    |
| 3          | 10    |
+------------+-------+


#common table expression that selects product, id and the max date for those products, filtering by dates less than or equal to '2019-08-16\'92 and grouping by the product id. (This grabs the latest change date for each grouped product) This is important to grab the maximum date for those dates with product id's specified by our filtering factor.\
obtaining product id's that are not in the common table expression, and setting their price as 10.
Then adding tale results together, with product id's and change_dates,  that are in the table expression, and keeping their price at the new price. This is important to make sure product id\'92s are being selected accurately according to filters set by cte.\
with cte as (select product_id, max(change_date) as change_date
from products 
where change_date <= '2019-08-16'
group by product_id)


select product_id, 10 as price 
from products 
where product_id not in (select product_id from cte) 
union  
select product_id, new_price as price
from products 
where (product_id, change_date) in (select * from cte);
